name: Release
on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - '.changeset/**'

jobs:
  release:
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
    strategy:
      fail-fast: true
      matrix:
        platform: [windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Install frontend dependencies
        run: pnpm install

      - name: Get version
        id: version
        shell: pwsh
        run: |
          $version = (Get-Content "package.json" | ConvertFrom-Json).version
          echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Generate Release Summary
        id: release-summary
        run: |
          $changelog = Get-Content "CHANGELOG.md" -Raw
          $version = "${{ steps.version.outputs.APP_VERSION }}"
          
          # Extract the current version's changes
          $pattern = "## $version(.*?)(?=## \d|\z)"
          $match = [regex]::Match($changelog, $pattern, [System.Text.RegularExpressions.RegexOptions]::Singleline)
          
          if ($match.Success) {
              $content = $match.Groups[1].Value.Trim()
          } else {
              $content = "Release v$version"
          }
          
          $content = $content -replace "`n","%0A"
          echo "SUMMARY=$content" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Check for changesets
        id: check-changesets
        run: |
          if (Test-Path ".changeset/*.md") {
            echo "HAS_CHANGESETS=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "HAS_CHANGESETS=false" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Version Packages
        if: steps.check-changesets.outputs.HAS_CHANGESETS == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          pnpm version-packages
          git add .
          git commit -m "chore: version packages"
          git push
        shell: pwsh

      - name: Build the app
        id: build-app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ steps.version.outputs.APP_VERSION }}
          releaseName: 'v${{ steps.version.outputs.APP_VERSION }}'
          releaseBody: ${{ steps.release-summary.outputs.SUMMARY }}
          releaseDraft: true
          prerelease: false
          packageManager: pnpm

      - name: Upload Windows MSI
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: Clippr-msi
          path: src-tauri/target/release/bundle/msi/Clippr_${{ steps.version.outputs.APP_VERSION }}_x64_en-US.msi

      - name: Upload Windows NSIS Installer
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: Clippr-nsis
          path: src-tauri/target/release/bundle/nsis/clippr_${{ steps.version.outputs.APP_VERSION }}_x64-setup.exe

      - name: Upload Windows Executable
        if: steps.build-app.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Clippr-exe
          path: src-tauri/target/release/Clippr.exe

      - name: Create Release
        id: create_release
        if: steps.build-app.outcome == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.APP_VERSION }}
          release_name: Release v${{ steps.version.outputs.APP_VERSION }}
          draft: true
          prerelease: false

      - name: Upload MSI to Release
        if: steps.create_release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/msi/Clippr_${{ steps.version.outputs.APP_VERSION }}_x64_en-US.msi
          asset_name: Clippr_${{ steps.version.outputs.APP_VERSION }}_x64_en-US.msi
          asset_content_type: application/x-msi

      - name: Upload NSIS to Release
        if: steps.create_release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/bundle/nsis/clippr_${{ steps.version.outputs.APP_VERSION }}_x64-setup.exe
          asset_name: clippr_${{ steps.version.outputs.APP_VERSION }}_x64-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Executable to Release
        if: steps.create_release.outcome == 'success'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/release/Clippr.exe
          asset_name: Clippr_${{ steps.version.outputs.APP_VERSION }}_x64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Publish Release
        if: success()
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
